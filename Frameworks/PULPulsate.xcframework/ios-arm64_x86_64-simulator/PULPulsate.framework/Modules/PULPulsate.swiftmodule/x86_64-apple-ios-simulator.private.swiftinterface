// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name PULPulsate
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import BackgroundTasks
import CommonCrypto
import CoreData
import CoreLocation
import Foundation
import Network
import OSLog
import ObjectiveC
@_exported import PULPulsate
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import UserNotificationsUI
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public func add(_ child: UIKit.UIViewController)
  @_Concurrency.MainActor @preconcurrency public func remove()
  @_Concurrency.MainActor @preconcurrency public func add(_ child: UIKit.UIViewController, frame: CoreFoundation.CGRect? = nil)
  @_Concurrency.MainActor @preconcurrency public func remove(_ child: UIKit.UIViewController)
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func removeAllConstraints()
}
@_inheritsConvenienceInitializers @objc(PULDBUserAction) public class PULDBUserAction : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class PULButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepareForInterfaceBuilder()
  @objc @_Concurrency.MainActor @preconcurrency public var textColorIdentifier: Swift.String {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var buttonColorIdentifier: Swift.String {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var imageColorIdentifier: Swift.String {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PULLabelsConfiguration : ObjectiveC.NSObject {
  @objc public var replyButton: Swift.String?
  @objc public var labelNewMessage: Swift.String?
  @objc public var labelNewUpdates: Swift.String?
  @objc public var labelNewMessages: Swift.String?
  @objc public var viewConversation: Swift.String?
  @objc public var selectSubject: Swift.String?
  @objc public var writeAMessage: Swift.String?
  @objc public var feedTitle: Swift.String?
  @objc public var singleCardFeedTitle: Swift.String?
  @objc public var createMessageTitle: Swift.String?
  @objc public var serverErrorDeletedUserConnection: Swift.String?
  @objc public var serverErrorConnection: Swift.String?
  @objc public var serverErrorMessageConnection: Swift.String?
  @objc public var sendButton: Swift.String?
  @objc public var giveYourMessageSubject: Swift.String?
  @objc public var sentAMessage: Swift.String?
  @objc public var repliedToYour: Swift.String?
  @objc public var bottomOfFeed: Swift.String?
  @objc public var feedback: Swift.String?
  @objc public var featureSuggestion: Swift.String?
  @objc public var complaint: Swift.String?
  @objc public var other: Swift.String?
  @objc public var otherHint: Swift.String?
  @objc public var youLabel: Swift.String?
  @objc public var feedEmptyTitle: Swift.String?
  @objc public var feedExpiredTitle: Swift.String?
  @objc public var feedEmptyLeftIcon: Swift.String?
  @objc public var feedEmptyRightIcon: Swift.String?
  @objc public var feedEmptyBottomIcon: Swift.String?
  @objc public var feedEmptySecondParagraph: Swift.String?
  @objc public var messageSending: Swift.String?
  @objc public var messageSent: Swift.String?
  @objc public var messageFailed: Swift.String?
  @objc public var messageTryAgain: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class PULDynamicViewBlocks : ObjectiveC.NSObject, PULPulsate.PULJSONSerializable {
  @objc public var viewBlocks: [Any]?
  @objc required public init(dictionary: [Swift.AnyHashable : Any]?)
  @objc public func getValueDictionary() -> [Swift.AnyHashable : Any]?
  @objc deinit
}
extension PULPulsate.PULLocationEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<PULPulsate.PULLocationEntity>
  @objc @NSManaged dynamic public var horizontalAccuracy: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStampAsString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var verticalAccuracy: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStamp: Foundation.Date? {
    @objc get
    @objc set
  }
}
@objc @objcMembers public class PULCustomAttributeAdapter : ObjectiveC.NSObject, PULPulsate.PULJSONSerializable {
  @objc public var key: Swift.String?
  @objc public var value: Swift.String?
  @objc public var action: Swift.String?
  @objc public var type: Swift.String?
  @objc public init(dbObject dbCustomAttribute: PULPulsate.PULDBCustomAttribute?)
  @objc public func getValueDictionary() -> [Swift.AnyHashable : Any]?
  @objc required public init(dictionary: [Swift.AnyHashable : Any]?)
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
public enum PULTextStyle : Swift.Int {
  case pulHeaderText
  case pulNormalText
  case pulSmallText
  case pulSmallHeaderText
  case pulHeading
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency public func pul_setImage(withURL url: Foundation.URL?, placeholder: UIKit.UIImage? = nil, cacheKey: Swift.String? = nil, completion: ((UIKit.UIImage?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func pul_setImage(withFileName fileName: Swift.String?, placeholder: UIKit.UIImage? = nil)
  @_Concurrency.MainActor @preconcurrency public func pul_cancelImageLoad()
}
@objc public enum PULCallToActionType : Swift.Int {
  case pulDismissBackCard
  case pulDismiss
  case pulLinkBackCard
  case pulLink
  case pulOpenFeedBackCard
  case pulOpenFeed
  case pulShowFeedBackCard
  case pulShowFeed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PULCallToActionButton : ObjectiveC.NSObject {
  @objc public var orderNumber: Swift.String?
  @objc public var btnColor: Swift.String?
  @objc public var txtColor: Swift.String?
  @objc public var buttonLabel: Swift.String?
  public var actionType: PULPulsate.PULCallToActionType!
  @objc public var destination: Swift.String?
  @objc public var customEvents: [Any]?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PULDBEvent) public class PULDBEvent : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class PULImageCache : ObjectiveC.NSObject {
  @objc public static let shared: PULPulsate.PULImageCache
  @objc deinit
  @objc public class func clearMemoryCaches()
  @objc public class func clearAllCaches()
}
extension PULPulsate.PULDebugLog {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<PULPulsate.PULDebugLog>
  @objc @NSManaged dynamic public var message: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var messageType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var uid: Swift.String? {
    @objc get
    @objc set
  }
}
@objc public protocol PULJSONSerializable : ObjectiveC.NSObjectProtocol {
  @objc func getValueDictionary() -> [Swift.AnyHashable : Any]?
  @objc init(dictionary: [Swift.AnyHashable : Any]?)
}
@objc public protocol PULPulsateUnauthorizedManagerDelegate {
  @objc func unauthorizedAction(_ action: Swift.String)
}
@objc @objcMembers public class PULSwipeToHideManager : ObjectiveC.NSObject {
  @objc public init(view: UIKit.UIView?, andHideEventBlock hideEventBlock: @escaping (Swift.Bool) -> Swift.Void, andTimeoutEventBlock timeoutEventBlock: @escaping () -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PulsateBundle {
  public static let main: Foundation.Bundle
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PULDBImpression) public class PULDBImpression : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension PULPulsate.PULPulsateManager {
  @objc dynamic public func getAllLocations() -> [PULPulsate.PULLocation]
  @objc dynamic public func resetStoredLocations() throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PULTopViewController : ObjectiveC.NSObject {
  @objc public class func getTopMostViewController() -> Any?
  @objc public class func unwrapTopMostViewController() -> UIKit.UIViewController?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PULUserAction : ObjectiveC.NSObject, PULPulsate.PULJSONSerializable {
  @objc public var guid: Swift.String?
  @objc public var action: Swift.String?
  @objc public var type: Swift.String?
  @objc public var timestamp: Foundation.NSNumber?
  @objc public var timestampsArray: [Any]?
  @objc override dynamic public init()
  @objc public func getValueDictionary() -> [Swift.AnyHashable : Any]?
  @objc required public init(dictionary: [Swift.AnyHashable : Any]?)
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
public enum CrashModelType : Swift.Int {
  case signal
  case exception
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PULUser : ObjectiveC.NSObject, PULPulsate.PULJSONSerializable {
  @objc public var device: PULPulsate.PULDevice?
  @objc public var userFirstName: Swift.String?
  @objc public var userLastName: Swift.String?
  @objc public var userEmail: Swift.String?
  @objc public var userPhoneNumber: Swift.String?
  @objc public var age: Foundation.NSNumber?
  @objc public var isMale: Foundation.NSNumber?
  @objc override dynamic public init()
  @objc public func getValueDictionary() -> [Swift.AnyHashable : Any]?
  @objc required public init(dictionary: [Swift.AnyHashable : Any]?)
  @objc deinit
}
@objc @objcMembers public class PULCallToActionBlock : ObjectiveC.NSObject, PULPulsate.PULJSONSerializable {
  @objc public var buttons: [Any]?
  @objc required public init(dictionary: [Swift.AnyHashable : Any]?)
  @objc public func getValueDictionary() -> [Swift.AnyHashable : Any]?
  @objc public func getViewIdentifier() -> Swift.String?
  @objc public func getCacheIdentifier() -> Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PULDevice : ObjectiveC.NSObject, PULPulsate.PULJSONSerializable {
  @objc public var token: Swift.String?
  @objc public var osVersion: Swift.String?
  @objc public var appVersion: Swift.String?
  @objc public var sdkVersion: Swift.String?
  @objc public var platform: Swift.String?
  @objc public var operatorName: Swift.String?
  @objc public var operatorCountryCode: Swift.String?
  @objc public var operatorMobileCountryCode: Swift.String?
  @objc public var operatorMobileNetworkCode: Swift.String?
  @objc public var currentLanguage: Swift.String?
  @objc public var timezone: Swift.String?
  @objc public var bundleIdentifier: Swift.String?
  @objc public var isDebug: Swift.Bool
  @objc public var language: Swift.String?
  @objc public var isLocationEnabled: Foundation.NSNumber?
  @objc public var isBackgroundLocationEnabled: Foundation.NSNumber?
  @objc public var isPushEnabled: Foundation.NSNumber?
  @objc override dynamic public init()
  @objc required public init(dictionary: [Swift.AnyHashable : Any]?)
  @objc public func getValueDictionary() -> [Swift.AnyHashable : Any]?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PULDebugLog) public class PULDebugLog : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc public protocol PULBlockDataInjectable : ObjectiveC.NSObjectProtocol {
  @objc func injectData(_ data: Any?)
  @objc func injectData(_ data: Any?, isInApp: Swift.Bool)
}
extension PULPulsate.PULDBEvent {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<PULPulsate.PULDBEvent>
  @objc @NSManaged dynamic public var lat: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lon: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.NSNumber? {
    @objc get
    @objc set
  }
}
@objc @objcMembers public class PULAccessToken : ObjectiveC.NSObject {
  @objc public var accessToken: Swift.String?
  @objc public var deviceGUID: Swift.String?
  @objc public init(authorizationData authData: PULPulsate.PULAuthorizationData?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PULLocation : ObjectiveC.NSObject, Swift.Codable {
  @objc public var longitude: Swift.Double
  @objc public var latitude: Swift.Double
  @objc public var verticalAccuracy: Swift.Double
  @objc public var horizontalAccuracy: Swift.Double
  @objc public var timestamp: Foundation.Date?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol PULPulsateBadgeDelegate {
  @objc func badgeUpdated(_ badgeNumber: Swift.Int)
  @objc func badgeDecrement(by badgeDecrement: Swift.Int, totalCount badgeNumber: Swift.Int)
  @objc func badgeIncrement(by badgeIncrement: Swift.Int, totalCount badgeNumber: Swift.Int)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class PULButtonTouchViewEffect : PULPulsate.PULButton {
  @objc @_Concurrency.MainActor @preconcurrency public var touchDownColor: UIKit.UIColor?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias RequestListener = (Swift.Bool, (any Swift.Error)?) -> Swift.Void
public typealias FeedListener = ([Any]?, (any Swift.Error)?) -> Swift.Void
public typealias PULPulsateLinkListener = (Swift.String) -> Swift.Bool
public typealias Completion = () -> Swift.Void
@objc public enum PULUserGender : Swift.Int {
  case pulMale
  case pulFemale
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PULPrivacyLevel : Swift.Int {
  case pulPrivacySubscribed
  case pulPrivacyUnsubscribed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PULPulsateManager : ObjectiveC.NSObject {
  @objc @IBOutlet weak public var unauthorizedDelegate: (any PULPulsate.PULPulsateUnauthorizedManagerDelegate)?
  @objc @IBOutlet weak public var badgeDelegate: (any PULPulsate.PULPulsateBadgeDelegate)?
  @objc public func startPulsateSession(_ listener: @escaping PULPulsate.RequestListener)
  @objc public func startPulsateSession(forAlias alias: Swift.String, withListener listener: @escaping PULPulsate.RequestListener)
  @objc public func clearAllNotifications()
  @objc public func logout(_ listener: @escaping PULPulsate.RequestListener)
  @objc public func startLocation()
  @objc public func startDebugLogging(enableNetworkLogs: Swift.Bool)
  @objc public func stopDebugLogging()
  @objc public func startRemoteNotifications()
  @objc public func startRemoteNotifications(with notificationSettings: UserNotifications.UNAuthorizationOptions)
  @objc public func getFeedNavigationController(completion: PULPulsate.Completion? = nil) -> UIKit.UINavigationController?
  @objc public func closeAutomaticallyOpenedFeed()
  @objc public func setPushNotificationEnabled(_ enabled: Swift.Bool)
  @objc public func isPushNotificationEnabled() -> Swift.Bool
  @objc public func setPrivacy(_ privacyLevel: PULPulsate.PULPrivacyLevel)
  @objc public func getPrivacy() -> Swift.Int
  @objc public func useInitials(forUserAvatar useInitials: Swift.Bool)
  @objc public func getUseInitialsForUserAvatar() -> Swift.Bool
  @objc public func setLocationUpdatesEnabled(_ enabled: Swift.Bool)
  @objc public func isLocationEnabled() -> Swift.Bool
  @objc public func enable(inAppNotification enabled: Swift.Bool)
  @objc public func isInAppNotificationEnabled() -> Swift.Bool
  @objc public func setSmallInAppNotificationDuration(_ seconds: Swift.Int)
  @objc public func getSmallInAppNotificationDuration() -> Swift.Int
  @objc public func showLastInAppNotification(_ forceShow: Swift.Bool = false)
  @objc public func setUserAuthorized(_ authorized: Swift.Bool)
  @objc public func isUserAuthorized() -> Swift.Bool
  @objc public func updateFirstName(_ firstName: Swift.String?)
  @objc public func updateLastName(_ lastName: Swift.String?)
  @objc public func updateEmail(_ email: Swift.String?)
  @objc public func updatePhoneNumber(_ phoneNumber: Swift.String?)
  @objc public func getPhoneNumber() -> Swift.String?
  @objc public func updateAge(_ age: Swift.Int)
  @objc public func updateGender(_ gender: PULPulsate.PULUserGender)
  @objc public func createAttribute(_ propertyName: Swift.String?, withString value: Swift.String?)
  @objc public func createAttribute(_ propertyName: Swift.String?, withDecimal number: Foundation.NSDecimalNumber?)
  @objc public func createAttribute(_ propertyName: Swift.String?, withInteger number: Swift.Int)
  @objc public func createAttribute(_ propertyName: Swift.String?, withBoolean boolean: Swift.Bool)
  @objc public func createAttribute(_ propertyName: Swift.String?, withDate date: Foundation.Date?)
  @objc public func incrementIntegerAttribute(_ attributeName: Swift.String?, withInteger value: Swift.Int)
  @objc public func decrementIntegerAttribute(_ attributeName: Swift.String?, withInteger value: Swift.Int)
  @objc public func incrementDecimalAttribute(_ attributeName: Swift.String?, withDecimal value: Foundation.NSDecimalNumber?)
  @objc public func decrementDecimalAttribute(_ attributeName: Swift.String?, withDecimal value: Foundation.NSDecimalNumber?)
  @objc public func createEvent(_ event: Swift.String?)
  @objc public func createEvents(_ event: [Any]?)
  @objc public func createRevenueEvent(_ revenueEvent: PULPulsate.PULRevenueEvent?)
  @objc public func forceAttributeSync()
  @objc public func showCampaignExpired()
  @objc public func sendLocation(withBeaconEvents sendLocation: Swift.Bool)
  @objc public func getDeviceGuid() -> Swift.String?
  @objc public func getFeedUnreadCount(completion: @escaping (Swift.Int) -> Swift.Void)
  @objc public func getBadgeCount()
  @objc public func saveUnauthorizedCampaign(withGUID guid: Swift.String?, andTitle title: Swift.String?, andNotificationMessage notificationMessage: Swift.String?)
  @objc public func saveUnauthorizedMessage(withGUID guid: Swift.String?, andTitle title: Swift.String?, andAdminHeader adminHeader: PULPulsate.PULAdminHeaderBlock?, andCampaignGuid campaignGuid: Swift.String?)
  @objc public func saveUnauthorizedCtaAction(_ destination_type: Swift.String?, andDestination destination: Swift.String?)
  @objc public func showLastUnauthorizedMessage()
  @objc public func removeUnauthorizedMessage()
  @objc public func receivedCampaign(_ campaignGUID: Swift.String?, withTitle title: Swift.String?, andNotificationMessage notificationMessage: Swift.String?, fromForeground foreground: Swift.Bool, fromClick isClick: Swift.Bool) -> Swift.Bool
  @objc public func received(_ inAppMessage: PULPulsate.PULInAppMessage?, _ forceShow: Swift.Bool)
  @objc public func getPulsateSystemManager() -> (any UIKit.UIApplicationDelegate & UserNotifications.UNUserNotificationCenterDelegate)?
  @objc public func startBackgroundUpdates(_ listener: @escaping PULPulsate.RequestListener)
  @objc public func setPULPulsateLinkListener(_ listener: @escaping PULPulsate.PULPulsateLinkListener)
  @objc public func userHasLoggedIn()
  @objc public func userHasLoggedOut()
  @objc public func showFake1()
  @objc public func showFake2()
  @objc public func showFake3()
  @objc public func forceCrash()
  @objc public func forceANR()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class PULImageTouchViewEffect : PULPulsate.PULImageView {
  @objc @_Concurrency.MainActor @preconcurrency public var onlyChangeAlpha: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public func startTint()
  @objc @_Concurrency.MainActor @preconcurrency public func endTint()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class PULDynamicCardViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency public init(renderables viewBlocksRenderables: [Any]?)
  @objc @_Concurrency.MainActor @preconcurrency public func refresh(withRenderables viewBlocksRenderables: [Any]?)
  @objc @_Concurrency.MainActor @preconcurrency public func getAccessibilityMessage(_ viewBlocksRenderables: [Any]?) -> Swift.String?
  @objc @_Concurrency.MainActor @preconcurrency public class func getEsimatedHeight(forRenderables viewBlockRenderables: [Swift.AnyObject]?, withWidth width: Swift.Int) -> Swift.Int
  @objc @_Concurrency.MainActor @preconcurrency public func setSubviewsBackgroundColor(_ color: UIKit.UIColor?)
  @objc deinit
}
extension Foundation.Data {
  public func sha256() -> Swift.String
}
extension Swift.String {
  public func sha256() -> Swift.String?
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class PULNavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc @_Concurrency.MainActor @preconcurrency public func adjustNavBarColor()
  @objc @_Concurrency.MainActor @preconcurrency public func isNavigationBarVisible() -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public func isNavbarAnimationFinished() -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class PULInitialsImageView : UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class PULDynamicImageView : UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public func simulateImage(withSize size: CoreFoundation.CGSize)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class PULImageViewBlockView : UIKit.UIView, PULPulsate.PULBlockDataInjectable {
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var dynamicImageView: PULPulsate.PULDynamicImageView!
  @IBOutlet @objc @_Concurrency.MainActor @preconcurrency public var imageBlock: PULPulsate.PULImageBlock!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var loadingImage: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var bottomConstraint: UIKit.NSLayoutConstraint!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var topConstraint: UIKit.NSLayoutConstraint!
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc public func injectData(_ data: Any?, isInApp: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func injectData(_ data: Any?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @objcMembers public class PULTextBlock : ObjectiveC.NSObject, PULPulsate.PULJSONSerializable {
  @objc public var contentText: Swift.String?
  public var textStyle: PULPulsate.PULTextStyle?
  @objc required public init(dictionary: [Swift.AnyHashable : Any]?)
  @objc public func getValueDictionary() -> [Swift.AnyHashable : Any]?
  @objc public func getViewIdentifier() -> Swift.String?
  @objc public func getCacheIdentifier() -> Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PULPulsateFactory : ObjectiveC.NSObject {
  @objc public class func setBaseUrl(_ baseUrl: Swift.String)
  @objc public class func setHTMLFeedBaseUrl(_ baseUrl: Swift.String)
  @objc public class func getHTMLFeedBaseUrl() -> Swift.String
  @objc public class func getBaseUrl() -> Swift.String?
  @objc public class func getInstance(withLaunchOptions launchOptions: [Swift.AnyHashable : Any]?) throws -> PULPulsate.PULPulsateManager
  @objc public class func getInstance(withAuthorizationData authorizationData: PULPulsate.PULAuthorizationData?, withLaunchOptions launchOptions: [Swift.AnyHashable : Any]?, withPulsateAppDelegate isPulsateAppDelegate: Swift.Bool, andPulsateNotificationDelegate isPulsateNotificationDelegate: Swift.Bool) throws -> PULPulsate.PULPulsateManager
  @objc public class func getInstance(withAuthorizationData authorizationData: PULPulsate.PULAuthorizationData?, withLaunchOptions launchOptions: [Swift.AnyHashable : Any]?) throws -> PULPulsate.PULPulsateManager
  @objc public class func getDefaultInstance() -> PULPulsate.PULPulsateManager?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum PULBeaconAction : Swift.Int {
  case pulBeaconExit
  case pulBeaconEnter
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class PULInAppMessage : ObjectiveC.NSObject, PULPulsate.PULJSONSerializable {
  @objc required public init(dictionary: [Swift.AnyHashable : Any]?)
  @objc public func getValueDictionary() -> [Swift.AnyHashable : Any]?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class PULImageView : UIKit.UIImageView {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var imageColorIdentifier: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var backgroundColorIdentifier: Swift.String {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepareForInterfaceBuilder()
  @objc @_Concurrency.MainActor @preconcurrency public func setImageColor(to color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @objcMembers public class PULAuthorizationData : ObjectiveC.NSObject {
  @objc public init(withAppId pAppId: Swift.String?, andAppKey pAppKey: Swift.String?) throws
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor @preconcurrency public static let modelName: Swift.String
}
@objc @objcMembers @_Concurrency.MainActor @preconcurrency public class PULSystemManager : ObjectiveC.NSObject, UIKit.UIApplicationDelegate, UserNotifications.UNUserNotificationCenterDelegate {
  @_Concurrency.MainActor @preconcurrency @objc public var window: UIKit.UIWindow?
  @objc @_Concurrency.MainActor @preconcurrency public init(pulsateAppDelegate isPulsateAppDelegate: Swift.Bool, andPulsateNotificationDelegate isPulsateNotificationDelegate: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func getDeviceInfo(_ withPermissions: Swift.Bool) -> PULPulsate.PULDevice?
  @objc @_Concurrency.MainActor @preconcurrency public func getPulsateSystemManager() -> (any UIKit.UIApplicationDelegate & UserNotifications.UNUserNotificationCenterDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc public func application(_ application: UIKit.UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Foundation.Data)
  @_Concurrency.MainActor @preconcurrency @objc public func application(_ application: UIKit.UIApplication, didFailToRegisterForRemoteNotificationsWithError error: any Swift.Error)
  @objc @_Concurrency.MainActor @preconcurrency public func registerToPushNotifications()
  @_Concurrency.MainActor @preconcurrency @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  @objc @_Concurrency.MainActor @preconcurrency public func handlePulsatePushNotificationPayload(response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  @objc @_Concurrency.MainActor @preconcurrency public func handleActionButton(_ btnDictionary: [Swift.String : Any]?, withGuid guid: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc public func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func application(_ application: UIKit.UIApplication, didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  @objc @_Concurrency.MainActor @preconcurrency public func getAllNotificationCategories() -> Swift.Set<UserNotifications.UNNotificationCategory>
  @_Concurrency.MainActor @preconcurrency @objc public func applicationDidBecomeActive(_ application: UIKit.UIApplication)
  @_Concurrency.MainActor @preconcurrency @objc public func applicationWillEnterForeground(_ application: UIKit.UIApplication)
  @_Concurrency.MainActor @preconcurrency @objc public func applicationDidEnterBackground(_ application: UIKit.UIApplication)
  @_Concurrency.MainActor @preconcurrency @objc public func applicationWillResignActive(_ application: UIKit.UIApplication)
  @_Concurrency.MainActor @preconcurrency @objc public func applicationWillTerminate(_ application: UIKit.UIApplication)
  @_Concurrency.MainActor @preconcurrency @objc public func application(_ app: UIKit.UIApplication, open url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:]) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func application(_ application: UIKit.UIApplication, continue userActivity: Foundation.NSUserActivity, restorationHandler: @escaping ([any UIKit.UIUserActivityRestoring]?) -> Swift.Void) -> Swift.Bool
  @objc deinit
}
@objc @objcMembers public class PULRemoteStorage : ObjectiveC.NSObject {
  @objc public init?(accessToken token: PULPulsate.PULAccessToken?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class PULNormalTextBlockView : UIKit.UIView, PULPulsate.PULBlockDataInjectable {
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var contentLabel: UIKit.UILabel!
  @_Concurrency.MainActor @preconcurrency @objc public func injectData(_ data: Any?, isInApp: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func injectData(_ data: Any?)
  @objc @_Concurrency.MainActor @preconcurrency public class func getEstimatedHeightForText(forData data: Swift.AnyObject, andWidth width: Swift.UInt) -> Swift.UInt
  @_Concurrency.MainActor @preconcurrency public class func getFont(forStyle style: PULPulsate.PULTextStyle) -> UIKit.UIFont
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum PULCurrency : Swift.Int {
  case AUD
  case BGN
  case BRL
  case CAD
  case CHF
  case CNY
  case CZK
  case DKK
  case EUR
  case GBP
  case HKD
  case HRK
  case HUF
  case IDR
  case ILS
  case INR
  case ISK
  case JPY
  case KRW
  case MXN
  case MYR
  case NOK
  case NZD
  case PHP
  case PLN
  case RON
  case RUB
  case SEK
  case SGD
  case THB
  case TRY
  case USD
  case ZAR
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class PULRevenueEvent : ObjectiveC.NSObject {
  public class func getAllCurrencyList() -> [PULPulsate.PULCurrency]?
  @objc public init(name eventName: Swift.String?, andAmount amount: Foundation.NSDecimalNumber?, andCurrency currency: PULPulsate.PULCurrency)
  @objc public class func formatCurrency(toString currency: PULPulsate.PULCurrency) -> Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class PULBaseViewController : UIKit.UIViewController {
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers @objc(PULDBCustomAttribute) public class PULDBCustomAttribute : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class PULKeyValueTextBlockView : UIKit.UIView, PULPulsate.PULBlockDataInjectable {
  @_Concurrency.MainActor @preconcurrency @objc public func injectData(_ data: Any?, isInApp: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func injectData(_ data: Any?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PULLocationEntity) public class PULLocationEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @objcMembers public class PULEventAdapter : ObjectiveC.NSObject, PULPulsate.PULJSONSerializable {
  @objc required public init(dbObject dbEvent: PULPulsate.PULDBEvent?)
  @objc public func getValueDictionary() -> [Swift.AnyHashable : Any]?
  @objc required public init(dictionary: [Swift.AnyHashable : Any]?)
  @objc deinit
}
public typealias ButtonCallback = (Swift.String) -> Swift.Void
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class PULButtonsBlockView : UIKit.UIView, PULPulsate.PULBlockDataInjectable {
  @objc @_Concurrency.MainActor @preconcurrency public var callBack: PULPulsate.ButtonCallback?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @objc @_Concurrency.MainActor @preconcurrency public func setCorners(_ corner: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency @objc public func injectData(_ data: Any?)
  @_Concurrency.MainActor @preconcurrency @objc public func injectData(_ data: Any?, isInApp: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class PULStringKey : ObjectiveC.NSObject {
  @objc public func getStringValue() -> Swift.String
  @objc public static let justNow: PULPulsate.PULStringKey
  @objc public static let minuteAgo: PULPulsate.PULStringKey
  @objc public static let hourAgo: PULPulsate.PULStringKey
  @objc public static let yesterday: PULPulsate.PULStringKey
  @objc public static let lastWeek: PULPulsate.PULStringKey
  @objc public static let lastMonth: PULPulsate.PULStringKey
  @objc public static let lastYear: PULPulsate.PULStringKey
  @objc public static let replyButton: PULPulsate.PULStringKey
  @objc public static let newMessageButton: PULPulsate.PULStringKey
  @objc public static let newMessagesButton: PULPulsate.PULStringKey
  @objc public static let viewConversationButton: PULPulsate.PULStringKey
  @objc public static let sendButton: PULPulsate.PULStringKey
  @objc public static let selectSubject: PULPulsate.PULStringKey
  @objc public static let writeAMessage: PULPulsate.PULStringKey
  @objc public static let feedTitle: PULPulsate.PULStringKey
  @objc public static let singleCardFeedTitle: PULPulsate.PULStringKey
  @objc public static let createMessageTitle: PULPulsate.PULStringKey
  @objc public static let bottomOfFeed: PULPulsate.PULStringKey
  @objc public static let feedEmptyTitle: PULPulsate.PULStringKey
  @objc public static let feedEmptyLeftIcon: PULPulsate.PULStringKey
  @objc public static let feedEmptyRightIcon: PULPulsate.PULStringKey
  @objc public static let feedEmptyBottomIcon: PULPulsate.PULStringKey
  @objc public static let feedEmptySecondParagraph: PULPulsate.PULStringKey
  @objc public static let feedback: PULPulsate.PULStringKey
  @objc public static let featureSuggestion: PULPulsate.PULStringKey
  @objc public static let complaint: PULPulsate.PULStringKey
  @objc public static let other: PULPulsate.PULStringKey
  @objc public static let otherHint: PULPulsate.PULStringKey
  @objc public static let giveYourMessageSubject: PULPulsate.PULStringKey
  @objc public static let messageSending: PULPulsate.PULStringKey
  @objc public static let messageSent: PULPulsate.PULStringKey
  @objc public static let messageFailed: PULPulsate.PULStringKey
  @objc public static let messageTryAgain: PULPulsate.PULStringKey
  @objc public static let repliedToYour: PULPulsate.PULStringKey
  @objc public static let sentAMessage: PULPulsate.PULStringKey
  @objc public static let youLabel: PULPulsate.PULStringKey
  @objc public static let newUpdates: PULPulsate.PULStringKey
  @objc public static let serverErrorDeletedUserConnection: PULPulsate.PULStringKey
  @objc public static let serverErrorConnection: PULPulsate.PULStringKey
  @objc public static let serverErrorMessageConnection: PULPulsate.PULStringKey
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PULStringConfiguration : ObjectiveC.NSObject {
  @objc public var justNow: Swift.String?
  @objc public var minuteAgo: Swift.String?
  @objc public var hourAgo: Swift.String?
  @objc public var yesterday: Swift.String?
  @objc public var lastWeek: Swift.String?
  @objc public var lastMonth: Swift.String?
  @objc public var lastYear: Swift.String?
  @objc public var replyButton: Swift.String?
  @objc public var newMessageButton: Swift.String?
  @objc public var newMessagesButton: Swift.String?
  @objc public var viewConversationButton: Swift.String?
  @objc public var sendButton: Swift.String?
  @objc public var selectSubject: Swift.String?
  @objc public var writeAMessage: Swift.String?
  @objc public var feedTitle: Swift.String?
  @objc public var singleCardFeedTitle: Swift.String?
  @objc public var createMessageTitle: Swift.String?
  @objc public var bottomOfFeed: Swift.String?
  @objc public var feedEmptyTitle: Swift.String?
  @objc public var feedEmptyLeftIcon: Swift.String?
  @objc public var feedEmptyRightIcon: Swift.String?
  @objc public var feedEmptyBottomIcon: Swift.String?
  @objc public var feedEmptySecondParagraph: Swift.String?
  @objc public var feedback: Swift.String?
  @objc public var featureSuggestion: Swift.String?
  @objc public var complaint: Swift.String?
  @objc public var other: Swift.String?
  @objc public var otherHint: Swift.String?
  @objc public var giveYourMessageSubject: Swift.String?
  @objc public var messageSending: Swift.String?
  @objc public var messageSent: Swift.String?
  @objc public var messageFailed: Swift.String?
  @objc public var messageTryAgain: Swift.String?
  @objc public var repliedToYour: Swift.String?
  @objc public var sentAMessage: Swift.String?
  @objc public var youLabel: Swift.String?
  @objc public var newUpdates: Swift.String?
  @objc public var serverErrorDeletedUserConnection: Swift.String?
  @objc public var serverErrorConnection: Swift.String?
  @objc public var serverErrorMessageConnection: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension PULPulsate.PULDBImpression {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<PULPulsate.PULDBImpression>
  @objc @NSManaged dynamic public var guid: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isTalkImpression: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
}
extension PULPulsate.PULDBCustomAttribute {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<PULPulsate.PULDBCustomAttribute>
  @objc @NSManaged dynamic public var action: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var creationTimeTimestamp: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var key: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var value: Swift.String? {
    @objc get
    @objc set
  }
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (PULPulsate.Reachability) -> ()
  public typealias NetworkUnreachable = (PULPulsate.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: PULPulsate.Reachability.NetworkStatus, b: PULPulsate.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: PULPulsate.Reachability.Connection
    public static func == (a: PULPulsate.Reachability.Connection, b: PULPulsate.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: PULPulsate.Reachability.NetworkReachable?
  public var whenUnreachable: PULPulsate.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: PULPulsate.Reachability.Connection {
    get
  }
  public var connection: PULPulsate.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension PULPulsate.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class PULThemeKey : ObjectiveC.NSObject {
  @objc public func getStringValue() -> Swift.String
  @objc public static let dividerLines: PULPulsate.PULThemeKey
  @objc public static let smallInAppMessageBackground: PULPulsate.PULThemeKey
  @objc public static let bigInAppHeader: PULPulsate.PULThemeKey
  @objc public static let bigInAppMessageBackground: PULPulsate.PULThemeKey
  @objc public static let bigInAppMessageButtonBackground: PULPulsate.PULThemeKey
  @objc public static let bigInAppMessageButtonText: PULPulsate.PULThemeKey
  @objc public static let bigInAppOneButton: PULPulsate.PULThemeKey
  @objc public static let bigInAppOneButtonText: PULPulsate.PULThemeKey
  @objc public static let bigInAppTwoButton: PULPulsate.PULThemeKey
  @objc public static let bigInAppTwoButtonText: PULPulsate.PULThemeKey
  @objc public static let bigInAppTwoButtonOutline: PULPulsate.PULThemeKey
  @objc public static let noInternetConnectionBackground: PULPulsate.PULThemeKey
  @objc public static let noInternetConnectionText: PULPulsate.PULThemeKey
  @objc public static let noInternetConnectionCross: PULPulsate.PULThemeKey
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PULThemeConfiguration : ObjectiveC.NSObject {
  @objc public var dividerLinesColor: UIKit.UIColor?
  @objc public var sendButtonColor: UIKit.UIColor?
  @objc public var textHintColor: UIKit.UIColor?
  @objc public var textInputColor: UIKit.UIColor?
  @objc public var frontUnknownColor: UIKit.UIColor?
  @objc public var dateCardBackgroundColor: UIKit.UIColor?
  @objc public var smallInAppMessageBackgroundColor: UIKit.UIColor?
  @objc public var bigInAppHeaderColor: UIKit.UIColor?
  @objc public var bigInAppMessageBackgroundColor: UIKit.UIColor?
  @objc public var bigInAppMessageButtonBackgroundColor: UIKit.UIColor?
  @objc public var bigInAppMessageButtonTextColor: UIKit.UIColor?
  @objc public var bigInAppOneButtonColor: UIKit.UIColor?
  @objc public var bigInAppOneButtonTextColor: UIKit.UIColor?
  @objc public var bigInAppTwoButtonColor: UIKit.UIColor?
  @objc public var bigInAppTwoButtonTextColor: UIKit.UIColor?
  @objc public var bigInAppTwoButtonOutlineColor: UIKit.UIColor?
  @objc public var noInternetConnectionBackgroundColor: UIKit.UIColor?
  @objc public var noInternetConnectionTextColor: UIKit.UIColor?
  @objc public var noInternetConnectionCrossColor: UIKit.UIColor?
  @objc override dynamic public init()
  @objc deinit
}
@objc extension PULPulsate.PULPulsateManager {
  @objc dynamic public func applyThemeConfiguration(_ config: PULPulsate.PULThemeConfiguration)
  @objc dynamic public func setSmallInAppMessageBackgroundColor(_ color: UIKit.UIColor)
  @objc dynamic public func setBigInAppHeaderColor(_ color: UIKit.UIColor)
  @objc dynamic public func setBigInAppMessageBackgroundColor(_ color: UIKit.UIColor)
  @objc dynamic public func setBigInAppOneButtonColor(_ color: UIKit.UIColor)
  @objc dynamic public func setBigInAppOneButtonTextColor(_ color: UIKit.UIColor)
  @objc dynamic public func setBigInAppTwoButtonColor(_ color: UIKit.UIColor)
  @objc dynamic public func setBigInAppTwoButtonTextColor(_ color: UIKit.UIColor)
  @objc dynamic public func setBigInAppTwoButtonOutlineColor(_ color: UIKit.UIColor)
  @objc dynamic public func getThemeConfigurationKeys() -> [Swift.String]
  @objc dynamic public func setCustomColorWithThemeKey(_ key: PULPulsate.PULThemeKey, color: UIKit.UIColor)
  @objc dynamic public func setCustomColor(forKey key: Swift.String, color: UIKit.UIColor)
  @objc dynamic public func resetThemeColors()
}
extension PULPulsate.PULDBUserAction {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<PULPulsate.PULDBUserAction>
  @objc @NSManaged dynamic public var action: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var guid: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
}
@objc @objcMembers public class PULImageBlock : ObjectiveC.NSObject, PULPulsate.PULJSONSerializable {
  @objc public var imageUrl: Swift.String?
  @objc public var width: Foundation.NSNumber?
  @objc public var height: Foundation.NSNumber?
  @objc required public init(dictionary: [Swift.AnyHashable : Any]?)
  @objc public func getValueDictionary() -> [Swift.AnyHashable : Any]?
  @objc deinit
}
@objc @objcMembers public class PULAdminHeaderBlock : ObjectiveC.NSObject, PULPulsate.PULJSONSerializable {
  @objc public var adminAvatarUrl: Swift.String?
  @objc public var adminName: Swift.String?
  @objc public var title: Swift.String?
  @objc public var message: Swift.String?
  @objc required public init(dictionary: [Swift.AnyHashable : Any]?)
  @objc public func getValueDictionary() -> [Swift.AnyHashable : Any]?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class PULBlurredView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public func setBlurredBackgroundViewWithColorIdentifier(_ colorIdentifier: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor @preconcurrency public func addSeparationLine(atBottom bottom: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @objcMembers public class PULImpressionRecord : ObjectiveC.NSObject, PULPulsate.PULJSONSerializable {
  @objc public var guid: Swift.String?
  @objc public var isTalk: Swift.Bool
  @objc public var impressionTimestamps: [Foundation.Date]?
  @objc required public init(dictionary: [Swift.AnyHashable : Any]?)
  @objc public func getValueDictionary() -> [Swift.AnyHashable : Any]?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PULPulsateError : ObjectiveC.NSObject {
  @objc public class func createKeyError(withDescription description: Swift.String?, andCode errorCode: Swift.Int) -> (any Swift.Error)?
  @objc override dynamic public init()
  @objc deinit
}
extension PULPulsate.PULTextStyle : Swift.Equatable {}
extension PULPulsate.PULTextStyle : Swift.Hashable {}
extension PULPulsate.PULTextStyle : Swift.RawRepresentable {}
extension PULPulsate.PULCallToActionType : Swift.Equatable {}
extension PULPulsate.PULCallToActionType : Swift.Hashable {}
extension PULPulsate.PULCallToActionType : Swift.RawRepresentable {}
extension PULPulsate.CrashModelType : Swift.Equatable {}
extension PULPulsate.CrashModelType : Swift.Hashable {}
extension PULPulsate.CrashModelType : Swift.RawRepresentable {}
extension PULPulsate.PULUserGender : Swift.Equatable {}
extension PULPulsate.PULUserGender : Swift.Hashable {}
extension PULPulsate.PULUserGender : Swift.RawRepresentable {}
extension PULPulsate.PULPrivacyLevel : Swift.Equatable {}
extension PULPulsate.PULPrivacyLevel : Swift.Hashable {}
extension PULPulsate.PULPrivacyLevel : Swift.RawRepresentable {}
extension PULPulsate.PULBeaconAction : Swift.Equatable {}
extension PULPulsate.PULBeaconAction : Swift.Hashable {}
extension PULPulsate.PULBeaconAction : Swift.RawRepresentable {}
extension PULPulsate.PULSystemManager : Swift.Sendable {}
extension PULPulsate.PULCurrency : Swift.Equatable {}
extension PULPulsate.PULCurrency : Swift.Hashable {}
extension PULPulsate.PULCurrency : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension PULPulsate.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension PULPulsate.Reachability.NetworkStatus : Swift.Hashable {}
extension PULPulsate.Reachability.Connection : Swift.Equatable {}
extension PULPulsate.Reachability.Connection : Swift.Hashable {}
